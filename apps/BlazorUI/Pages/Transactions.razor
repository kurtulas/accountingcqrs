@page "/transactions/{CustomerId}/{AccountId}"

@using System.Net.Http
@using BlazorUI.Data
@inject IModalService Modal
@using System.Net.Http.Json
@inject HttpClient Http

<h1>Transactions</h1>

<p>Account : @AccountId</p>

@if (transactions == null)
{
    <p><em>Loading...</em></p>
}
else
{ 
    <table class="table">
        <thead>
            <tr>
                <td align="right">
                    <button @onclick="ShowCreateTransaction" class="btn btn-primary">Create Transaction</button>

                </td>

            </tr>
        </thead>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>                
                <th>Amount</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var transaction in transactions)
            {
                <tr>
                    <td>@transaction.Id</td>
                    <td>@transaction.Amount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string AccountId { get; set; }

    [Parameter]
    public string CustomerId { get; set; }

    private Transaction[] transactions;

    async Task GetTransactions()
    {
        var url = "/api/transaction/Transaction/AccountId?accountId=" + AccountId;        
        transactions = await Http.GetFromJsonAsync<Transaction[]>(url);
    }

    protected override async Task OnInitializedAsync()
    {
        await GetTransactions();
    }

    async Task ShowCreateTransaction()
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(CreateTransaction.AccountId), AccountId);
        parameters.Add(nameof(CreateTransaction.CustomerId), CustomerId);

        var createModal = Modal.Show<CreateTransaction>("Create new transaction", parameters);
        var result = await createModal.Result;
        if (result.Cancelled)
        {

        }
        else
        {
            await GetTransactions();
        }
    }
}
